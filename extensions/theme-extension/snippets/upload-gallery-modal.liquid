<div id="upload-gallery-modal-overlay" class="Polaris-Backdrop" style="
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.7);
  z-index: 9999;
  justify-content: center;
  align-items: center;
">
  <div class="Polaris-Modal-Dialog__Container" style="
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
  ">
    <div class="Polaris-Modal-Dialog" style="
      position: relative;
      background: white;
      border-radius: 8px;
      max-width: 450px;
      width: 90%;
      padding: 40px 30px 30px 30px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    ">
      <!-- Close X button -->
      <button id="close-upload-gallery-modal" type="button" style="
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        font-size: 24px;
        font-weight: bold;
        color: #333;
        cursor: pointer;
      ">&times;</button>

      <!-- Modal Header -->
      <div class="Polaris-Modal-Header" style="text-align: center; margin-bottom: 20px;">
        <h2 class="Polaris-Modal-Header__Title" style="font-size: 20px; font-weight: 600;">
          Upload Gallery
        </h2>
      </div>

      <div class="Polaris-Modal__BodyWrapper">
        <div class="Polaris-Modal__Body">
          <form id="upload-gallery-form" enctype="multipart/form-data">
            <input type="hidden" name="customerId" id="upload-customer-id" />
            <input type="hidden" name="name" id="upload-customer-name" />
            <input type="hidden" name="email" id="upload-customer-email" />
            <!-- NEW: hidden shop param -->
            <input type="hidden" name="shop" value="{{ shop.permanent_domain }}" />

            <div class="Polaris-FormLayout" style="display: flex; flex-direction: column; gap: 15px;">

              <!-- Type Dropdown -->
              <div class="Polaris-FormLayout__Item">
                <select
                  id="upload-type"
                  required
                  class="Polaris-Select"
                  style="width: 100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px;"
                >
                  <option value="">Select Type</option>
                  <option value="product">Product</option>
                  <option value="article">Blog</option>
                  <option value="page">Page</option>
                  <option value="collection">Collection</option>
                </select>
              </div>

              <!-- Event Dropdown -->
              <div class="Polaris-FormLayout__Item">
                <select
                  name="eventId"
                  id="upload-event"
                  required
                  class="Polaris-Select"
                  style="width: 100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px;"
                >
                  <option value="">Select Event</option>
                </select>
              </div>

              <!-- File Upload -->
              <div class="Polaris-FormLayout__Item">
                <input
                  type="file"
                  name="images"
                  id="upload-gallery-images"
                  multiple
                  accept="image/*"
                  class="Polaris-TextField__Input"
                  style="width: 100%; padding: 12px; border: 1px solid #ccc; border-radius: 4px;"
                />
              </div>

              <!-- Submit Button -->
              <div class="Polaris-FormLayout__Item">
                <button
                  type="submit"
                  class="Polaris-Button Polaris-Button--primary"
                  style="background:{{ button_bg_color }}; color:{{ button_text_color }}; padding: 12px 20px; border: none; border-radius: 6px; width: 100%; font-weight: bold; transition: all 0.3s ease;"
                >
                  Submit
                </button>
              </div>

              <!-- Success/Error Message -->
              <p id="upload-gallery-message" class="Polaris-Text--success Polaris-Text--center" style="margin-top: 10px;"></p>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  const modalOverlay = document.getElementById("upload-gallery-modal-overlay");
  const closeModalBtn = document.getElementById("close-upload-gallery-modal");
  const uploadButton = document.getElementById("upload-gallery-button");
  const form = document.getElementById("upload-gallery-form");
  const message = document.getElementById("upload-gallery-message");
  const typeSelect = document.getElementById("upload-type");
  const eventSelect = document.getElementById("upload-event");

  let allItems = [];

  window.customerData = {
    id: {{ customer.id | json }},
    email: {{ customer.email | json }},
    first_name: {{ customer.first_name | json }},
    last_name: {{ customer.last_name | json }}
  };

  if (modalOverlay) {
    document.body.appendChild(modalOverlay);
  }

  // ✅ Populate hidden fields directly from window.customerData
  populateCustomerFieldsFromWindow();
  fetchAllItems();

  function closeUploadModal() {
    if (modalOverlay) modalOverlay.style.display = "none";
    resetFormAndMessage();
  }

  uploadButton?.addEventListener("click", function () {
    if (!window.customerData?.email) {
      showToast("⚠️ Please log in to upload images.");
      setTimeout(() => {
        window.location.href = "/account/login";
      }, 1500);
    } else {
      if (modalOverlay) modalOverlay.style.display = "flex";
       resetFormAndMessage();
    }
  });

  function resetFormAndMessage() {
  if (form) form.reset();
  if (message) {
    message.textContent = "";
    message.classList.remove("Polaris-Text--success", "Polaris-Text--critical");
  }
}

  closeModalBtn?.addEventListener("click", closeUploadModal);
  modalOverlay?.addEventListener("click", function (e) {
    if (e.target === modalOverlay) closeUploadModal();
  });

  // ✅ Submit form
  form?.addEventListener("submit", async function (e) {
    e.preventDefault();
    message.textContent = "";
    message.classList.remove("Polaris-Text--success", "Polaris-Text--critical");

    const formData = new FormData(form);

    try {
      const res = await fetch(`https://gallery-flow-two.vercel.app/api/gallery?shop={{ shop.permanent_domain }}`, {
        method: "POST",
        body: formData,
      });

      const json = await res.json();

      if (json.success) {
        message.textContent = json.message || "Your request is in process.";
        message.classList.add("Polaris-Text--success");
        form.reset();

        setTimeout(() => {
          closeUploadModal();
        }, 2000);
      } else {
        message.textContent = json.error || "Something went wrong.";
        message.classList.add("Polaris-Text--critical");
      }
    } catch (error) {
      console.error("Upload error:", error);
      message.textContent = "An error occurred. Please try again.";
      message.classList.add("Polaris-Text--critical");
    }
  });

  function populateCustomerFieldsFromWindow() {
    if (window.customerData) {
      document.getElementById("upload-customer-id").value = window.customerData.id || "";
      document.getElementById("upload-customer-name").value =
        `${window.customerData.first_name || ""} ${window.customerData.last_name || ""}`.trim();
      document.getElementById("upload-customer-email").value = window.customerData.email || "";
    }
  }

  async function fetchAllItems() {
    try {
      const res = await fetch(`https://gallery-flow-two.vercel.app/api/gallery?shop={{ shop.permanent_domain }}`);
      const json = await res.json();

      if (!json.success) return;

      if (json.disabled) {
        allItems = [
          ...json.products.map((p) => ({ id: p.id, name: p.title, type: "product" })),
          ...json.blogs.flatMap((b) =>
            b.articles.map((a) => ({ id: a.id, name: `${b.title} - ${a.title}`, type: "article" }))
          ),
          ...json.collections.map((c) => ({ id: c.id, name: c.title, type: "collection" })),
          ...json.pages.map((p) => ({ id: p.id, name: p.title, type: "page" })),
        ];
      } else {
        allItems = json.events.map((ev) => ({
          id: ev.id,
          name: ev.name,
          date: ev.date,
          type: ev.type,
        }));
      }
    } catch (error) {
      console.error("Error fetching items:", error);
    }
  }

  typeSelect?.addEventListener("change", function () {
    const selectedType = this.value;
    if (!selectedType) {
      eventSelect.innerHTML = '<option value="">Select</option>';
      return;
    }
    const filtered = allItems.filter((item) => item.type === selectedType);
    populateEventDropdown(filtered);
  });

  function populateEventDropdown(items) {
    eventSelect.innerHTML = '<option value="">Select</option>';
    items.forEach((item) => {
      const option = document.createElement("option");
      option.value = item.id;
      option.textContent =
        item.name + (item.date ? ` (${new Date(item.date).toLocaleDateString()})` : "");
      eventSelect.appendChild(option);
    });
  }

  function showToast(msg) {
    const toast = document.createElement("div");
    toast.textContent = msg;
    toast.style.position = "fixed";
    toast.style.bottom = "20px";
    toast.style.right = "20px";
    toast.style.background = "#333";
    toast.style.color = "#fff";
    toast.style.padding = "10px 16px";
    toast.style.borderRadius = "6px";
    toast.style.zIndex = "99999";
    toast.style.fontSize = "14px";
    toast.style.opacity = "0";
    toast.style.transition = "opacity 0.3s ease";
    document.body.appendChild(toast);

    requestAnimationFrame(() => {
      toast.style.opacity = "1";
    });

    setTimeout(() => {
      toast.style.opacity = "0";
      setTimeout(() => toast.remove(), 300);
    }, 2000);
  }
</script>